// Code generated by goyacc g.y. DO NOT EDIT.

//line g.y:2
package calc

import (
	"fmt"
	__yyfmt__ "fmt"
	"strconv"
)

// 语法树节点类型
//
//line g.y:2
type NodeType int

const (
	NodeProgram NodeType = iota
	NodeVarDecl
	NodeAssign
	NodeExpr
	NodeBinOp
	NodeUnaryOp
	NodeTernary
	NodeIdent
	NodeFunc
	NodeNumber
	NodeBool
)

// 语法树节点
type Node struct {
	Type     NodeType
	Target   exprType
	Token    string
	Children []*Node
}

// 注意：不再使用全局变量，改为在 lexer 实例中存储结果

//line g.y:37
type yySymType struct {
	yys  int
	node *Node
	str  string
	num  float64
	bool bool
}

const IDENT = 57346
const NUMBER = 57347
const BOOLEAN = 57348
const INT = 57349
const FLOAT = 57350
const BOOL = 57351
const TRUE = 57352
const FALSE = 57353
const ASSIGN = 57354
const SEMICOLON = 57355
const COMMA = 57356
const LPAREN = 57357
const RPAREN = 57358
const QUESTION = 57359
const COLON = 57360
const PLUS = 57361
const MINUS = 57362
const MULTIPLY = 57363
const DIVIDE = 57364
const MOD = 57365
const POWER = 57366
const AND = 57367
const OR = 57368
const NOT = 57369
const LT = 57370
const LE = 57371
const GT = 57372
const GE = 57373
const EQ = 57374
const NE = 57375
const UMINUS = 57376
const UPLUS = 57377

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"NUMBER",
	"BOOLEAN",
	"INT",
	"FLOAT",
	"BOOL",
	"TRUE",
	"FALSE",
	"ASSIGN",
	"SEMICOLON",
	"COMMA",
	"LPAREN",
	"RPAREN",
	"QUESTION",
	"COLON",
	"PLUS",
	"MINUS",
	"MULTIPLY",
	"DIVIDE",
	"MOD",
	"POWER",
	"AND",
	"OR",
	"NOT",
	"LT",
	"LE",
	"GT",
	"GE",
	"EQ",
	"NE",
	"UMINUS",
	"UPLUS",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line g.y:415

// 词法分析器接口
type Lexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

// 简单的词法分析器实现
type SimpleLexer struct {
	input  string
	pos    int
	line   int
	result *Node // 存储解析结果，替代全局变量
	e      error // 存储编译过程中遇到的错误
}

func NewLexer(input string) *SimpleLexer {
	return &SimpleLexer{input: input, pos: 0, line: 1}
}

func (l *SimpleLexer) Error(s string) {
	l.e = fmt.Errorf("parse fail line:%d pos:%d error:%s", l.line, l.pos, s)
}

func (l *SimpleLexer) Lex(lval *yySymType) int {
	for l.pos < len(l.input) {
		ch := l.input[l.pos]

		// 跳过空白字符
		if ch == ' ' || ch == '\t' || ch == '\r' {
			l.pos++
			continue
		}

		if ch == '\n' {
			l.line++
			l.pos++
			continue
		}

		// 识别各种token
		switch ch {
		case ';':
			l.pos++
			return SEMICOLON
		case '=':
			if l.pos+1 < len(l.input) && l.input[l.pos+1] == '=' {
				l.pos += 2
				return EQ
			}
			l.pos++
			return ASSIGN
		case '(':
			l.pos++
			return LPAREN
		case ')':
			l.pos++
			return RPAREN
		case '+':
			l.pos++
			return PLUS
		case '-':
			l.pos++
			return MINUS
		case '*':
			l.pos++
			return MULTIPLY
		case '/':
			l.pos++
			return DIVIDE
		case '%':
			l.pos++
			return MOD
		case '^':
			l.pos++
			return POWER
		case ',':
			l.pos++
			return COMMA
		case '?':
			l.pos++
			return QUESTION
		case ':':
			l.pos++
			return COLON
		case '!':
			if l.pos+1 < len(l.input) && l.input[l.pos+1] == '=' {
				l.pos += 2
				return NE
			}
			l.pos++
			return NOT
		case '<':
			if l.pos+1 < len(l.input) && l.input[l.pos+1] == '=' {
				l.pos += 2
				return LE
			}
			l.pos++
			return LT
		case '>':
			if l.pos+1 < len(l.input) && l.input[l.pos+1] == '=' {
				l.pos += 2
				return GE
			}
			l.pos++
			return GT
		case '&':
			if l.pos+1 < len(l.input) && l.input[l.pos+1] == '&' {
				l.pos += 2
				return AND
			}
			// 单独的 & 字符是非法的，跳过并报告错误
			l.Error(fmt.Sprintf("unexpected character '&' at position %d", l.pos))
			l.pos++
			continue
		case '|':
			if l.pos+1 < len(l.input) && l.input[l.pos+1] == '|' {
				l.pos += 2
				return OR
			}
			// 单独的 | 字符是非法的，跳过并报告错误
			l.Error(fmt.Sprintf("unexpected character '|' at position %d", l.pos))
			l.pos++
			continue
		}

		// 识别数字（包括以点开头的小数）
		if (ch >= '0' && ch <= '9') ||
			(ch == '.' && l.pos+1 < len(l.input) && l.input[l.pos+1] >= '0' && l.input[l.pos+1] <= '9') {
			return l.lexNumber(lval)
		}

		// 识别标识符和关键字
		if (ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z') || ch == '_' {
			return l.lexIdent(lval)
		}

		// 未识别的字符，报告错误并跳过
		l.Error(fmt.Sprintf("unexpected character '%c' at position %d", ch, l.pos))
		l.pos++
	}
	return 0 // EOF
}

func (l *SimpleLexer) lexNumber(lval *yySymType) int {
	start := l.pos
	hasDot := false
	hasDigit := false

	for l.pos < len(l.input) {
		ch := l.input[l.pos]
		if ch >= '0' && ch <= '9' {
			hasDigit = true
			l.pos++
		} else if ch == '.' && !hasDot {
			hasDot = true
			l.pos++
		} else {
			break
		}
	}

	numStr := l.input[start:l.pos]

	// 检查是否是有效的数字格式
	if numStr == "" || numStr == "." || !hasDigit {
		// 回退位置，将其作为未识别字符处理
		l.pos = start + 1
		l.Error(fmt.Sprintf("invalid number format '%s' at position %d",
			l.input[start:l.pos], start))
		return l.Lex(lval) // 递归调用继续处理
	}

	if _, err := strconv.ParseFloat(numStr, 64); err == nil {
		lval.str = numStr
		return NUMBER
	}

	// 如果数字格式无效，回退并报错
	l.pos = start + 1
	l.Error(fmt.Sprintf("invalid number format '%s' at position %d", numStr, start))
	return l.Lex(lval) // 递归调用继续处理
}

func (l *SimpleLexer) lexIdent(lval *yySymType) int {
	start := l.pos

	for l.pos < len(l.input) {
		ch := l.input[l.pos]
		if (ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z') ||
			(ch >= '0' && ch <= '9') || ch == '_' {
			l.pos++
		} else {
			break
		}
	}

	ident := l.input[start:l.pos]
	lval.str = ident

	// 检查关键字
	switch ident {
	case "int":
		return INT
	case "float":
		return FLOAT
	case "bool":
		return BOOL
	case "true":
		lval.bool = true
		return TRUE
	case "false":
		lval.bool = false
		return FALSE
	default:
		return IDENT
	}
}

// 解析函数
func parse(input string) (*Node, error) {
	lexer := NewLexer(input)
	if yyParse(lexer) != 0 {
		return nil, fmt.Errorf("fail: %v", lexer.e)
	}
	return lexer.result, nil
}

//line yacctab:1
var yyExca = [...]int8{
	-1, 1,
	1, -1,
	-2, 0,
}

const yyPrivate = 57344

const yyLast = 84

var yyAct = [...]int8{
	9, 19, 17, 15, 6, 8, 25, 18, 10, 11,
	12, 26, 27, 37, 38, 16, 28, 34, 36, 14,
	22, 23, 39, 40, 41, 42, 35, 48, 24, 3,
	45, 46, 47, 53, 43, 44, 75, 56, 73, 58,
	60, 20, 63, 64, 65, 66, 57, 69, 70, 71,
	72, 67, 68, 61, 62, 59, 50, 25, 32, 54,
	33, 33, 26, 27, 49, 51, 52, 28, 55, 29,
	74, 22, 23, 31, 7, 21, 76, 13, 5, 24,
	30, 4, 2, 1,
}

var yyPact = [...]int16{
	1, -1000, 56, -1000, -1000, -1000, -1000, 69, 46, -1000,
	-1000, -1000, -1000, 0, -7, -19, -6, 15, 9, -1000,
	3, -1000, 52, 52, 52, -1000, -1000, -1000, 52, 1,
	54, -1000, 52, 30, 52, 52, 52, 52, 52, 52,
	52, 52, 52, 52, 52, 52, 52, 52, 52, -1000,
	45, -1000, -1000, 22, -1000, 66, -1000, -1000, 18, -7,
	-19, -6, -6, 15, 15, 15, 15, 9, 9, -1000,
	-1000, -1000, -1000, -1000, -1000, 52, -1000,
}

var yyPgo = [...]int8{
	0, 83, 82, 29, 81, 80, 78, 4, 0, 77,
	19, 3, 15, 2, 7, 1, 41, 75, 74,
}

var yyR1 = [...]int8{
	0, 1, 2, 2, 3, 3, 3, 4, 5, 5,
	18, 18, 18, 6, 7, 8, 8, 9, 9, 10,
	10, 11, 11, 11, 12, 12, 12, 12, 12, 13,
	13, 13, 14, 14, 14, 14, 15, 15, 16, 16,
	16, 16, 17, 17, 17, 17, 17, 17,
}

var yyR2 = [...]int8{
	0, 1, 1, 3, 1, 1, 1, 2, 1, 3,
	1, 1, 1, 3, 1, 1, 5, 1, 3, 1,
	3, 1, 3, 3, 1, 3, 3, 3, 3, 1,
	3, 3, 1, 3, 3, 3, 1, 3, 1, 2,
	2, 2, 1, 3, 1, 1, 1, 3,
}

var yyChk = [...]int16{
	-1000, -1, -2, -3, -4, -6, -7, -18, 4, -8,
	7, 8, 9, -9, -10, -11, -12, -13, -14, -15,
	-16, -17, 19, 20, 27, 5, 10, 11, 15, 13,
	-5, 4, 12, 15, 17, 26, 25, 32, 33, 28,
	29, 30, 31, 19, 20, 21, 22, 23, 24, -16,
	4, -16, -16, -7, -3, 14, -7, 16, -7, -10,
	-11, -12, -12, -13, -13, -13, -13, -14, -14, -15,
	-15, -15, -15, 16, 4, 18, -8,
}

var yyDef = [...]int8{
	0, -2, 1, 2, 4, 5, 6, 0, 42, 14,
	10, 11, 12, 15, 17, 19, 21, 24, 29, 32,
	36, 38, 0, 0, 0, 44, 45, 46, 0, 0,
	7, 8, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 39,
	42, 40, 41, 0, 3, 0, 13, 43, 0, 18,
	20, 22, 23, 25, 26, 27, 28, 30, 31, 33,
	34, 35, 37, 47, 9, 0, 16,
}

var yyTok1 = [...]int8{
	1,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line g.y:91
		{
			if yyDollar[1].node.Type == NodeProgram {
				yyVAL.node = yyDollar[1].node
			} else {
				yyVAL.node = &Node{Type: NodeProgram, Children: []*Node{yyDollar[1].node}}
			}
			yylex.(*SimpleLexer).result = yyVAL.node
		}
	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line g.y:103
		{
			yyVAL.node = yyDollar[1].node
		}
	case 3:
		yyDollar = yyS[yypt-3 : yypt+1]
//line g.y:107
		{
			// 如果第一个节点不是NodeProgram类型，创建一个包装节点
			if yyDollar[1].node.Type != NodeProgram {
				yyVAL.node = &Node{Type: NodeProgram, Children: []*Node{yyDollar[1].node, yyDollar[3].node}}
			} else {
				yyDollar[1].node.Children = append(yyDollar[1].node.Children, yyDollar[3].node)
				yyVAL.node = yyDollar[1].node
			}
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line g.y:119
		{
			yyVAL.node = yyDollar[1].node
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
//line g.y:120
		{
			yyVAL.node = yyDollar[1].node
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
//line g.y:121
		{
			yyVAL.node = yyDollar[1].node
		}
	case 7:
		yyDollar = yyS[yypt-2 : yypt+1]
//line g.y:126
		{
			yyVAL.node = &Node{
				Type:  NodeVarDecl,
				Token: yyDollar[1].str + ":" + yyDollar[2].str,
			}
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line g.y:136
		{
			yyVAL.str = yyDollar[1].str
		}
	case 9:
		yyDollar = yyS[yypt-3 : yypt+1]
//line g.y:140
		{
			yyVAL.str = yyDollar[1].str + "," + yyDollar[3].str
		}
	case 10:
		yyDollar = yyS[yypt-1 : yypt+1]
//line g.y:146
		{
			yyVAL.str = "int"
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
//line g.y:147
		{
			yyVAL.str = "float"
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
//line g.y:148
		{
			yyVAL.str = "bool"
		}
	case 13:
		yyDollar = yyS[yypt-3 : yypt+1]
//line g.y:153
		{
			yyVAL.node = &Node{
				Type:     NodeAssign,
				Token:    yyDollar[1].str,
				Children: []*Node{yyDollar[3].node},
			}
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
//line g.y:163
		{
			yyVAL.node = yyDollar[1].node
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
//line g.y:168
		{
			yyVAL.node = yyDollar[1].node
		}
	case 16:
		yyDollar = yyS[yypt-5 : yypt+1]
//line g.y:172
		{
			yyVAL.node = &Node{
				Type:     NodeTernary,
				Token:    "?:",
				Children: []*Node{yyDollar[1].node, yyDollar[3].node, yyDollar[5].node},
			}
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
//line g.y:183
		{
			yyVAL.node = yyDollar[1].node
		}
	case 18:
		yyDollar = yyS[yypt-3 : yypt+1]
//line g.y:187
		{
			yyVAL.node = &Node{
				Type:     NodeBinOp,
				Token:    "||",
				Children: []*Node{yyDollar[1].node, yyDollar[3].node},
			}
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
//line g.y:198
		{
			yyVAL.node = yyDollar[1].node
		}
	case 20:
		yyDollar = yyS[yypt-3 : yypt+1]
//line g.y:202
		{
			yyVAL.node = &Node{
				Type:     NodeBinOp,
				Token:    "&&",
				Children: []*Node{yyDollar[1].node, yyDollar[3].node},
			}
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
//line g.y:213
		{
			yyVAL.node = yyDollar[1].node
		}
	case 22:
		yyDollar = yyS[yypt-3 : yypt+1]
//line g.y:217
		{
			yyVAL.node = &Node{
				Type:     NodeBinOp,
				Token:    "==",
				Children: []*Node{yyDollar[1].node, yyDollar[3].node},
			}
		}
	case 23:
		yyDollar = yyS[yypt-3 : yypt+1]
//line g.y:225
		{
			yyVAL.node = &Node{
				Type:     NodeBinOp,
				Token:    "!=",
				Children: []*Node{yyDollar[1].node, yyDollar[3].node},
			}
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
//line g.y:236
		{
			yyVAL.node = yyDollar[1].node
		}
	case 25:
		yyDollar = yyS[yypt-3 : yypt+1]
//line g.y:240
		{
			yyVAL.node = &Node{
				Type:     NodeBinOp,
				Token:    "<",
				Children: []*Node{yyDollar[1].node, yyDollar[3].node},
			}
		}
	case 26:
		yyDollar = yyS[yypt-3 : yypt+1]
//line g.y:248
		{
			yyVAL.node = &Node{
				Type:     NodeBinOp,
				Token:    "<=",
				Children: []*Node{yyDollar[1].node, yyDollar[3].node},
			}
		}
	case 27:
		yyDollar = yyS[yypt-3 : yypt+1]
//line g.y:256
		{
			yyVAL.node = &Node{
				Type:     NodeBinOp,
				Token:    ">",
				Children: []*Node{yyDollar[1].node, yyDollar[3].node},
			}
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
//line g.y:264
		{
			yyVAL.node = &Node{
				Type:     NodeBinOp,
				Token:    ">=",
				Children: []*Node{yyDollar[1].node, yyDollar[3].node},
			}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line g.y:275
		{
			yyVAL.node = yyDollar[1].node
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line g.y:279
		{
			yyVAL.node = &Node{
				Type:     NodeBinOp,
				Token:    "+",
				Children: []*Node{yyDollar[1].node, yyDollar[3].node},
			}
		}
	case 31:
		yyDollar = yyS[yypt-3 : yypt+1]
//line g.y:287
		{
			yyVAL.node = &Node{
				Type:     NodeBinOp,
				Token:    "-",
				Children: []*Node{yyDollar[1].node, yyDollar[3].node},
			}
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line g.y:298
		{
			yyVAL.node = yyDollar[1].node
		}
	case 33:
		yyDollar = yyS[yypt-3 : yypt+1]
//line g.y:302
		{
			yyVAL.node = &Node{
				Type:     NodeBinOp,
				Token:    "*",
				Children: []*Node{yyDollar[1].node, yyDollar[3].node},
			}
		}
	case 34:
		yyDollar = yyS[yypt-3 : yypt+1]
//line g.y:310
		{
			yyVAL.node = &Node{
				Type:     NodeBinOp,
				Token:    "/",
				Children: []*Node{yyDollar[1].node, yyDollar[3].node},
			}
		}
	case 35:
		yyDollar = yyS[yypt-3 : yypt+1]
//line g.y:318
		{
			yyVAL.node = &Node{
				Type:     NodeBinOp,
				Token:    "%",
				Children: []*Node{yyDollar[1].node, yyDollar[3].node},
			}
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line g.y:329
		{
			yyVAL.node = yyDollar[1].node
		}
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
//line g.y:333
		{
			yyVAL.node = &Node{
				Type:     NodeBinOp,
				Token:    "^",
				Children: []*Node{yyDollar[1].node, yyDollar[3].node},
			}
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line g.y:344
		{
			yyVAL.node = yyDollar[1].node
		}
	case 39:
		yyDollar = yyS[yypt-2 : yypt+1]
//line g.y:348
		{
			yyVAL.node = &Node{
				Type:     NodeUnaryOp,
				Token:    "+",
				Children: []*Node{yyDollar[2].node},
			}
		}
	case 40:
		yyDollar = yyS[yypt-2 : yypt+1]
//line g.y:356
		{
			yyVAL.node = &Node{
				Type:     NodeUnaryOp,
				Token:    "-",
				Children: []*Node{yyDollar[2].node},
			}
		}
	case 41:
		yyDollar = yyS[yypt-2 : yypt+1]
//line g.y:364
		{
			yyVAL.node = &Node{
				Type:     NodeUnaryOp,
				Token:    "!",
				Children: []*Node{yyDollar[2].node},
			}
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line g.y:375
		{
			yyVAL.node = &Node{
				Type:  NodeIdent,
				Token: yyDollar[1].str,
			}
		}
	case 43:
		yyDollar = yyS[yypt-3 : yypt+1]
//line g.y:382
		{
			yyVAL.node = &Node{
				Type:  NodeFunc,
				Token: yyDollar[1].str,
			}
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line g.y:389
		{
			yyVAL.node = &Node{
				Type:  NodeNumber,
				Token: yyDollar[1].str,
			}
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
//line g.y:396
		{
			yyVAL.node = &Node{
				Type:  NodeBool,
				Token: "true",
			}
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
//line g.y:403
		{
			yyVAL.node = &Node{
				Type:  NodeBool,
				Token: "false",
			}
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
//line g.y:410
		{
			yyVAL.node = yyDollar[2].node
		}
	}
	goto yystack /* stack new state and value */
}
